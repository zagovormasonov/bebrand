# -*- coding: utf-8 -*-
"""BeBrand Telegram бот: минимальная версия (Telegram → OpenAI), с поддержкой .env и прокси."""

from __future__ import annotations

import asyncio
import logging
import os

import httpx
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from openai import OpenAI

# ---------------------------------------------------------------------------
# .env и конфиг
# ---------------------------------------------------------------------------
load_dotenv()  # подтянет переменные из .env рядом с файлом

API_TOKEN = os.getenv("API_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o")  # можно сменить в .env

_missing = [n for n, v in [("API_TOKEN", API_TOKEN), ("OPENAI_API_KEY", OPENAI_API_KEY)] if not v]
if _missing:
    raise RuntimeError(f"Missing environment variables: {', '.join(_missing)}")

# ---------------------------------------------------------------------------
# Логирование
# ---------------------------------------------------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)

# ---------------------------------------------------------------------------
# OpenAI клиент (учитываем прокси, если указан)
# ---------------------------------------------------------------------------
proxy = os.getenv("HTTPS_PROXY") or os.getenv("HTTP_PROXY")  # напр. http://user:pass@IP:8888 или socks5h://...
http_client = httpx.Client(proxies=proxy, timeout=30) if proxy else None
oa_client = OpenAI(api_key=OPENAI_API_KEY, http_client=http_client)

# ---------------------------------------------------------------------------
# Telegram (aiogram)
# ---------------------------------------------------------------------------
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ---------------------------------------------------------------------------
# Системный промпт (как в твоём проекте)
# ---------------------------------------------------------------------------
SYSTEM_PROMPT = '''
не используй форматирование текста(жирный шрифт и тд)

Отвечай только на русском языке. 

Говори о себе только в мужском роде.

Ответь как можно правдивее, используя предоставленный контекст выше.

Тебе нужно не только ответить на вопросы, но продать клиенту бесплатную проверку его товарного знака. 

Для этого можно задавать вопросы по регистрации. 

Тебе нужно подсветить всевозможные подводные камни и риски - то есть, причины получить как можно скорее бесплатную проверку названия и логотипа клиента как потенциального товарного знака. Не надо писать сразу большие сообщения. 

Задавай вопросы, чтобы беседа шла по сценарию, ведущему клиента к пониманию его болей и проблемы. 

Не надо писать "Спасибо, что поделились, что у вас уже есть название и логотип", и подобные благодарности за ничего не стоящие человеку действия, это бред. Не надо повторять за человеком то, что он только что написал. То есть, когда ты пишешь “на каких площадках вы планируете размещаться?”, а пользователь отвечает “на маркетплейсах и ютубе”, НЕ НАДО отвечать ему “Понятно, вы планируете размещаться на маркетплейсах и ютубе”. И не надо начинать сообщения со слова “Понятно”. ВООБЩЕ НИКАК НЕ КОММЕНТИРУЙ ответы клиента вначале своих сообщений.

В первых нескольких сообщениях важно задать уточняющие вопросы. 

Очень важно получить ответы на следующие вопросы: [-на каких площадках? вывеска будет у вас? на сайте? в соц сетях?маркетплейсы? реклама, радио, видео? будете продавать, производить продукцию или оказывать услуги?]. 

Если клиент готов к проверке его товарного знака, надо сказать [напишите свой номер телефона, и бот подключит к диалогу менеджера по проверке названия] (в этой фразе нужно говорить от лица менеджера про бота, который подключит)

Делай вид, что ты человек. Не представляйся ботом и не упоминай слово "бот".

Первым сообщением должно быть: "Здравствуйте! Пока я зову менеджера, ответьте на вопрос: есть ли у вас уже название или логотип для вашего бизнеса?". Следующий ответ на сообщение пользователя должен начинаться с "Здравствуйте, меня зовут Алексей Баженов, я руководитель удмуртского филиала компании BeBrand в Ижевске" +попробовать узнать имя

Там где уместно, упомяни про штрафы до 10 млн рублей за неправомерное использование товарного знака

Если клиент отказывается от проверки, пишет что не хочет и тд, нельзя сдаваться. Нужно дожимать, мотивировать, уговаривать, приводить плюсы и выгоды бесплатной проверки, можно использовать целую стратегию, например задавать доп вопросы, на основе ответов на которые предполагается, что пользователь всё же согласится на бесплатную проверку

...
'''.strip()

# ---------------------------------------------------------------------------
# /start
# ---------------------------------------------------------------------------
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext) -> None:
    history = [
        {"role": "system", "content": SYSTEM_PROMPT},
        {"role": "assistant", "content": (
            "Здравствуйте! Пока я зову менеджера, ответьте на вопрос: "
            "есть ли у вас уже название или логотип для вашего бизнеса?"
        )},
    ]
    await state.update_data(chat_history=history)
    await message.answer(history[-1]["content"])

# ---------------------------------------------------------------------------
# Диалог: прокидываем историю в OpenAI и отвечаем
# ---------------------------------------------------------------------------
@dp.message()
async def handle(message: types.Message, state: FSMContext) -> None:
    user_text = (message.text or "").strip()
    data = await state.get_data()
    history = data.get("chat_history") or [{"role": "system", "content": SYSTEM_PROMPT}]
    history.append({"role": "user", "content": user_text})

    try:
        resp = oa_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=history,
            max_tokens=500,
            temperature=0.9,
        )
        reply = resp.choices[0].message.content or "…"
    except Exception:
        logging.exception("OpenAI API error")
        reply = "Сервис временно недоступен, попробуем ещё раз позже."

    history.append({"role": "assistant", "content": reply})
    await state.update_data(chat_history=history)
    await asyncio.sleep(0)  # точка переключения
    await message.answer(reply)

# ---------------------------------------------------------------------------
# Точка входа
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    logger.info("Bot starting…")
    asyncio.run(dp.start_polling(bot))
